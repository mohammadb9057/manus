// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  agents         Agent[]
  workflows      Workflow[]
  teamMemberships TeamMember[]
  executions     Execution[]
  apiKeys        ApiKey[]

  @@map("users")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members      TeamMember[]
  sharedAgents SharedAgent[]

  @@map("teams")
}

model TeamMember {
  id     String   @id @default(cuid())
  role   TeamRole @default(MEMBER)
  userId String
  teamId String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model Agent {
  id          String      @id @default(cuid())
  name        String
  description String?
  type        AgentType   @default(CHATBOT)
  status      AgentStatus @default(INACTIVE)
  config      Json        @default("{}")
  systemPrompt String?
  temperature Float       @default(0.7)
  maxTokens   Int         @default(1000)
  model       String      @default("gpt-4")
  tools       String[]    @default([])
  triggers    Json        @default("[]")
  isPublic    Boolean     @default(false)
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions   Execution[]
  sharedAgents SharedAgent[]
  workflows    WorkflowStep[]

  @@map("agents")
}

model Workflow {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      WorkflowStatus @default(DRAFT)
  config      Json          @default("{}")
  triggers    Json          @default("[]")
  isPublic    Boolean       @default(false)
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps      WorkflowStep[]
  executions Execution[]

  @@map("workflows")
}

model WorkflowStep {
  id         String @id @default(cuid())
  name       String
  type       String // 'agent', 'condition', 'delay', 'webhook', etc.
  config     Json   @default("{}")
  position   Int
  workflowId String
  agentId    String?

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  agent    Agent?   @relation(fields: [agentId], references: [id], onDelete: SetNull)

  @@map("workflow_steps")
}

model Execution {
  id         String          @id @default(cuid())
  type       ExecutionType
  status     ExecutionStatus @default(PENDING)
  input      Json?
  output     Json?
  error      String?
  startedAt  DateTime        @default(now())
  finishedAt DateTime?
  duration   Int? // in milliseconds
  userId     String
  agentId    String?
  workflowId String?

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent    Agent?    @relation(fields: [agentId], references: [id], onDelete: SetNull)
  workflow Workflow? @relation(fields: [workflowId], references: [id], onDelete: SetNull)
  logs     ExecutionLog[]

  @@map("executions")
}

model ExecutionLog {
  id          String   @id @default(cuid())
  level       LogLevel @default(INFO)
  message     String
  data        Json?
  timestamp   DateTime @default(now())
  executionId String

  // Relations
  execution Execution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@map("execution_logs")
}

model SharedAgent {
  id          String            @id @default(cuid())
  permissions SharedPermissions @default(READ)
  agentId     String
  teamId      String
  createdAt   DateTime          @default(now())

  // Relations
  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  team  Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([agentId, teamId])
  @@map("shared_agents")
}

model Tool {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  type        ToolType @default(API)
  config      Json     @default("{}")
  schema      Json?    // OpenAPI schema or custom schema
  isBuiltIn   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tools")
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  lastUsed  DateTime?
  isActive  Boolean  @default(true)
  userId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Schedule {
  id          String        @id @default(cuid())
  name        String
  description String?
  cronExpression String
  timezone    String        @default("UTC")
  isActive    Boolean       @default(true)
  lastRun     DateTime?
  nextRun     DateTime?
  config      Json          @default("{}")
  type        ScheduleType  @default(AGENT)
  targetId    String        // agentId or workflowId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("schedules")
}

model Webhook {
  id          String      @id @default(cuid())
  name        String
  url         String
  secret      String?
  events      String[]    @default([])
  isActive    Boolean     @default(true)
  lastTriggered DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("webhooks")
}

model Analytics {
  id        String      @id @default(cuid())
  type      AnalyticsType
  data      Json
  timestamp DateTime    @default(now())
  userId    String?
  agentId   String?

  @@map("analytics")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TeamRole {
  MEMBER
  ADMIN
  OWNER
}

enum AgentType {
  CHATBOT
  AUTOMATION
  DATA_PROCESSOR
  API_CONNECTOR
  SCHEDULER
  MONITOR
  CUSTOM
}

enum AgentStatus {
  ACTIVE
  INACTIVE
  ERROR
  PAUSED
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ERROR
}

enum ExecutionType {
  AGENT
  WORKFLOW
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum SharedPermissions {
  READ
  WRITE
  ADMIN
}

enum ToolType {
  API
  WEBHOOK
  DATABASE
  FILE
  CUSTOM
}

enum ScheduleType {
  AGENT
  WORKFLOW
}

enum AnalyticsType {
  EXECUTION
  ERROR
  USAGE
  PERFORMANCE
}

